{"version":3,"file":"index.mjs","sources":["../src/editor/behavior/behavior.types.ts","../src/editor/behavior/behavior.utils.ts","../src/editor/behavior/behavior.core.block-objects.ts","../src/editor/behavior/behavior.core.decorators.ts","../src/editor/behavior/behavior.core.lists.ts","../src/editor/behavior/behavior.core.ts","../src/editor/behavior/behavior.markdown.ts","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/editor/define-schema.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/schema.ts","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.16/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/utils/withChanges.ts","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.1/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/applyPatch.ts","../src/utils/withoutPatching.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/editor-actor-context.ts","../src/editor/behavior/behavior.action.insert-break.ts","../src/editor/behavior/behavior.actions.ts","../src/editor/editor-machine.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/key-generator.ts","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/withSyncRangeDecorations.ts","../src/editor/Editable.tsx","../src/editor/use-editor.ts"],"sourcesContent":["import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\n\n/**\n * @alpha\n */\nexport type BehaviorContext = {\n  schema: PortableTextMemberSchemaTypes\n  value: Array<PortableTextBlock>\n  selection: NonNullable<EditorSelection>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorEvent =\n  | {\n      type: 'decorator.add'\n      decorator: string\n    }\n  | {\n      type: 'decorator.remove'\n      decorator: string\n    }\n  | {\n      type: 'decorator.toggle'\n      decorator: string\n    }\n  | {\n      type: 'delete backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'insert soft break'\n    }\n  | {\n      type: 'insert break'\n    }\n  | {\n      type: 'insert text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorGuard<\n  TBehaviorEvent extends BehaviorEvent,\n  TGuardResponse,\n> = ({\n  context,\n  event,\n}: {\n  event: TBehaviorEvent\n  context: BehaviorContext\n}) => TGuardResponse | false\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntend =\n  | BehaviorEvent\n  | {\n      type: 'insert text block'\n      decorators: Array<string>\n    }\n  | {\n      type: 'set block'\n      paths: Array<[KeyedSegment]>\n      style?: string\n      listItem?: string\n      level?: number\n    }\n  | {\n      type: 'unset block'\n      paths: Array<[KeyedSegment]>\n      props: Array<'style' | 'listItem' | 'level'>\n    }\n  | {\n      type: 'delete'\n      selection: NonNullable<EditorSelection>\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n  | {\n      type: 'reselect'\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorAction = BehaviorActionIntend & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @alpha\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<\n    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n    TGuardResponse\n  >\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntendSet<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = (\n  {\n    context,\n    event,\n  }: {\n    context: BehaviorContext\n    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @alpha\n */\nexport function defineBehavior<\n  TBehaviorEventType extends BehaviorEvent['type'],\n  TGuardResponse = true,\n>(behavior: Behavior<TBehaviorEventType, TGuardResponse>): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @alpha\n */\nexport type PickFromUnion<\n  TUnion,\n  TTagKey extends keyof TUnion,\n  TPickedTags extends TUnion[TTagKey],\n> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {BehaviorContext} from './behavior.types'\n\n/**\n * Selection utilities\n */\n\nexport function selectionIsCollapsed(context: BehaviorContext) {\n  return (\n    context.selection?.anchor.path.join() ===\n      context.selection?.focus.path.join() &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n\n/**\n * Value utilities\n */\n\nexport function getFocusBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getFocusTextBlock(\n  context: BehaviorContext,\n): {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusBlockObject(\n  context: BehaviorContext,\n): {node: PortableTextObject; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusChild(context: BehaviorContext):\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined {\n  const focusBlock = getFocusTextBlock(context)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\nexport function getFocusSpan(\n  context: BehaviorContext,\n):\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined {\n  const focusChild = getFocusChild(context)\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\nexport function getSelectionStartBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getSelectionEndBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getPreviousBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(context)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\nexport function getNextBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(context)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n\nexport function isEmptyTextBlock(block: PortableTextTextBlock) {\n  return block.children.length === 1 && block.children[0].text === ''\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusBlockObject,\n  getFocusTextBlock,\n  getNextBlock,\n  getPreviousBlock,\n  isEmptyTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert break',\n  guard: ({context}) => {\n    const focusBlockObject = getFocusBlockObject(context)\n\n    return !!focusBlockObject\n  },\n  actions: [() => [{type: 'insert text block', decorators: []}]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const previousBlock = getPreviousBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      {\n        type: 'delete',\n        selection: {\n          anchor: {path: focusTextBlock.path, offset: 0},\n          focus: {path: focusTextBlock.path, offset: 0},\n        },\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete forward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const nextBlock = getNextBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      {\n        type: 'delete',\n        selection: {\n          anchor: {path: focusTextBlock.path, offset: 0},\n          focus: {path: focusTextBlock.path, offset: 0},\n        },\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  breakingBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defineBehavior} from './behavior.types'\n\nconst decoratorAdd = defineBehavior({\n  on: 'decorator.add',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.add',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorRemove = defineBehavior({\n  on: 'decorator.remove',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.remove',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nconst decoratorToggle = defineBehavior({\n  on: 'decorator.toggle',\n  actions: [\n    ({event}) => [\n      {\n        type: 'decorator.toggle',\n        decorator: event.decorator,\n      },\n      {\n        type: 'reselect',\n      },\n    ],\n  ],\n})\n\nexport const coreDecoratorBehaviors = {\n  decoratorAdd,\n  decoratorRemove,\n  decoratorToggle,\n}\n","import {defineBehavior} from './behavior.types'\nimport {\n  getFocusSpan,\n  getFocusTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      {\n        type: 'unset block',\n        props: ['listItem', 'level'],\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      {\n        type: 'set block',\n        level,\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {clearListOnBackspace, unindentListOnBackspace}\n","import {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreListBehaviors} from './behavior.core.lists'\nimport {defineBehavior} from './behavior.types'\n\nconst softReturn = defineBehavior({\n  on: 'insert soft break',\n  actions: [() => [{type: 'insert text', text: '\\n'}]],\n})\n\n/**\n * @alpha\n */\nexport const coreBehaviors = [\n  softReturn,\n  coreDecoratorBehaviors.decoratorAdd,\n  coreDecoratorBehaviors.decoratorRemove,\n  coreDecoratorBehaviors.decoratorToggle,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n]\n\n/**\n * @alpha\n */\nexport const coreBehavior = {\n  softReturn,\n  decorators: coreDecoratorBehaviors,\n  blockObjects: coreBlockObjectBehaviors,\n  lists: coreListBehaviors,\n}\n","import type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusSpan,\n  getFocusTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\n/**\n * @alpha\n */\nexport type MarkdownBehaviorsConfig = {\n  mapDefaultStyle: (schema: PortableTextMemberSchemaTypes) => string | undefined\n  mapHeadingStyle: (\n    schema: PortableTextMemberSchemaTypes,\n    level: number,\n  ) => string | undefined\n  mapBlockquoteStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n  mapUnorderedListStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n  mapOrderedListStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n}\n\n/**\n * @alpha\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const caretAtTheEndOfQuote = context.selection.focus.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(focusSpan.node.text)\n      const blockquoteStyle = config.mapBlockquoteStyle(context.schema)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, focusSpan, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, focusSpan, style}) => [\n        {\n          type: 'unset block',\n          props: ['listItem', 'level'],\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'set block',\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete',\n          selection: {\n            anchor: {\n              path: focusSpan.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusSpan.path,\n              offset: 2,\n            },\n          },\n        },\n      ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const markdownHeadingSearch = /^#+/.exec(focusSpan.node.text)\n      const headingLevel = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading =\n        context.selection.focus.offset === headingLevel\n\n      if (!caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const headingStyle =\n        headingLevel !== undefined\n          ? config.mapHeadingStyle(context.schema, headingLevel)\n          : undefined\n\n      if (headingLevel !== undefined && headingStyle !== undefined) {\n        return {\n          focusTextBlock,\n          focusSpan,\n          style: headingStyle,\n          level: headingLevel,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, focusSpan, style, level}) => [\n        {\n          type: 'unset block',\n          props: ['listItem', 'level'],\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'set block',\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete',\n          selection: {\n            anchor: {\n              path: focusSpan.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusSpan.path,\n              offset: level + 1,\n            },\n          },\n        },\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete backward',\n    guard: ({context}) => {\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        context.selection.focus.offset === 0\n\n      const defaultStyle = config.mapDefaultStyle(context.schema)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        {\n          type: 'set block',\n          style: defaultStyle,\n          paths: [focusTextBlock.path],\n        },\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const defaultStyle = config.mapDefaultStyle(context.schema)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(focusSpan.node.text)\n      const unorderedListStyle = config.mapUnorderedListStyle(context.schema)\n      const caretAtTheEndOfUnorderedList = context.selection.focus.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          focusSpan,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1./.test(focusSpan.node.text)\n      const orderedListStyle = config.mapOrderedListStyle(context.schema)\n      const caretAtTheEndOfOrderedList = context.selection.focus.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          focusSpan,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, focusSpan, style, listItem, listItemLength}) => [\n        {\n          type: 'set block',\n          listItem,\n          level: 1,\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete',\n          selection: {\n            anchor: {\n              path: focusSpan.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusSpan.path,\n              offset: listItemLength + 1,\n            },\n          },\n        },\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {\n  defineField,\n  defineType,\n  type BlockDecoratorDefinition,\n  type ObjectSchemaType,\n} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\n\n/**\n * @alpha\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n  icon?: BlockDecoratorDefinition['icon']\n}\n\n/**\n * @alpha\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @alpha\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title: blockObject.title,\n        icon: blockObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        icon: inlineObject.icon,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n              icon: decorator.icon,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n              icon: annotation.icon,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n            icon: list.icon,\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n            icon: style.icon,\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = getPortableTextMemberSchemaTypes(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies PortableTextMemberSchemaTypes\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function createArrayedPath(\n  point: EditorSelectionPoint,\n  editor: Editor,\n): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(point.path[0]) &&\n        (n as Descendant)._key === point.path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {useMemo, useRef, type FunctionComponent, type ReactElement} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    editor.addMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.add',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.removeMark = (mark) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.remove',\n          decorator: mark,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {\n  IS_PROCESSING_LOCAL_CHANGES,\n  IS_PROCESSING_REMOTE_CHANGES,\n} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {BehaviourActionImplementation} from '../behavior/behavior.actions'\nimport type {BehaviorAction, PickFromUnion} from '../behavior/behavior.types'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const addDecoratorActionImplementation: BehaviourActionImplementation<\n  PickFromUnion<BehaviorAction, 'type', 'decorator.add'>\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n\n  if (editor.selection) {\n    if (Range.isExpanded(editor.selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      // Use new selection\n      const splitTextNodes = Range.isRange(editor.selection)\n        ? [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: Text.isText,\n            }),\n          ]\n        : []\n      const shouldRemoveMark =\n        splitTextNodes.length > 1 &&\n        splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n      if (shouldRemoveMark) {\n        editor.removeMark(mark)\n      } else {\n        splitTextNodes.forEach(([node, path]) => {\n          const marks = [\n            ...(Array.isArray(node.marks) ? node.marks : []).filter(\n              (eMark: string) => eMark !== mark,\n            ),\n            mark,\n          ]\n          Transforms.setNodes(\n            editor,\n            {marks},\n            {at: path, match: Text.isText, split: true, hanging: true},\n          )\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, editor.selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks:\n              existingMarks.length === existingMarksWithoutDecorator.length\n                ? [...existingMarks, mark]\n                : existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: [...existingMarks, mark],\n        }\n        editor.marks = marks as Text\n      }\n    }\n    editor.onChange()\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviourActionImplementation<\n  PickFromUnion<BehaviorAction, 'type', 'decorator.remove'>\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n\nexport const toggleDecoratorActionImplementation: BehaviourActionImplementation<\n  PickFromUnion<BehaviorAction, 'type', 'decorator.toggle'>\n> = ({context, action}) => {\n  const isActive = isDecoratorActive({\n    editor: action.editor,\n    decorator: action.decorator,\n  })\n\n  if (isActive) {\n    removeDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.remove',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  } else {\n    addDecoratorActionImplementation({\n      context,\n      action: {\n        type: 'decorator.add',\n        editor: action.editor,\n        decorator: action.decorator,\n      },\n    })\n  }\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n) {\n  return function withEditableAPI(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'decorator.toggle',\n            decorator: mark,\n          },\n          editor,\n        })\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return isDecoratorActive({editor, decorator: mark})\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(\n            editor,\n            editor.selection.focus.path.slice(0, 1),\n          )\n          if (block) {\n            return fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(\n            editor,\n            editor.selection.focus.path.slice(0, 1),\n          )\n          if (block && editor.isTextBlock(block)) {\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0] as PortableTextTextBlock\n            return ptBlock.children[editor.selection.focus.path[1]]\n          }\n        }\n        return undefined\n      },\n      insertChild: <TSchemaType extends {name: string}>(\n        type: TSchemaType,\n        value?: {[prop: string]: any},\n      ): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focused text block')\n        }\n        if (\n          type.name !== types.span.name &&\n          !types.inlineObjects.some((t) => t.name === type.name)\n        ) {\n          throw new Error(\n            'This type cannot be inserted as a child to a text block',\n          )\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        const focusChildPath = editor.selection.focus.path.slice(0, 2)\n        const isSpanNode = child._type === types.span.name\n        const focusNode = Node.get(editor, focusChildPath)\n\n        // If we are inserting a span, and currently have focus on an inline object,\n        // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n        if (isSpanNode && focusNode._type !== types.span.name) {\n          debug(\n            'Inserting span child next to inline object child, moving selection + 1',\n          )\n          editor.move({distance: 1, unit: 'character'})\n        }\n\n        Transforms.insertNodes(editor, child, {\n          select: true,\n          at: editor.selection,\n        })\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      insertBlock: <TSchemaType extends {name: string}>(\n        type: TSchemaType,\n        value?: {[prop: string]: any},\n      ): Path => {\n        const block = toSlateValue(\n          [\n            {\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as Node\n\n        if (!editor.selection) {\n          const lastBlock = Array.from(\n            Editor.nodes(editor, {\n              match: (n) => !Editor.isEditor(n),\n              at: [],\n              reverse: true,\n            }),\n          )[0]\n\n          // If there is no selection, let's just insert the new block at the\n          // end of the document\n          Editor.insertNode(editor, block)\n\n          if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], types)) {\n            // And if the last block was an empty text block, let's remove\n            // that too\n            Transforms.removeNodes(editor, {at: lastBlock[1]})\n          }\n\n          editor.onChange()\n\n          return (\n            toPortableTextRange(\n              fromSlateValue(\n                editor.children,\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor),\n              ),\n              editor.selection,\n              types,\n            )?.focus.path ?? []\n          )\n        }\n\n        const focusBlock = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0]\n\n        Editor.insertNode(editor, block)\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock[0]], types)) {\n          Transforms.removeNodes(editor, {at: focusBlock[1]})\n        }\n\n        editor.onChange()\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch {\n          // This is fine.\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch {\n          // This is fine.\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path,\n      ): [\n        PortableTextBlock | PortableTextChild | undefined,\n        Path | undefined,\n      ] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor,\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(\n            editor,\n            slatePath.focus.path.slice(0, 1),\n          )\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [\n                fromSlateValue([block], types.block.name)[0],\n                [{_key: block._key}],\n              ]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [\n                  ptChild,\n                  [{_key: block._key}, 'children', {_key: ptChild._key}],\n                ]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (\n        element: PortableTextBlock | PortableTextChild,\n      ): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || [],\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch {\n          return []\n        }\n      },\n      isAnnotationActive: (\n        annotationType: PortableTextObject['_type'],\n      ): boolean => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return false\n        }\n\n        try {\n          const spans = [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: (node) => Text.isText(node),\n            }),\n          ]\n\n          if (spans.length === 0) {\n            return false\n          }\n\n          if (\n            spans.some(\n              ([span]) =>\n                !isPortableTextSpan(span) ||\n                !span.marks ||\n                span.marks?.length === 0,\n            )\n          )\n            return false\n\n          const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block) && block.markDefs) {\n              return [...accMarkDefs, ...block.markDefs]\n            }\n            return accMarkDefs\n          }, [] as PortableTextObject[])\n\n          return spans.every(([span]) => {\n            if (!isPortableTextSpan(span)) return false\n\n            const spanMarkDefs = span.marks?.map(\n              (markKey) =>\n                selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n            )\n\n            return spanMarkDefs?.includes(annotationType)\n          })\n        } catch {\n          return false\n        }\n      },\n      addAnnotation: (type, value) => {\n        const {selection: originalSelection} = editor\n        let returnValue: ReturnType<EditableAPI['addAnnotation']> | undefined =\n          undefined\n\n        if (originalSelection) {\n          if (Range.isCollapsed(originalSelection)) {\n            editor.pteExpandToWord()\n            editor.onChange()\n          }\n\n          // If we still have a selection, add the annotation to the selected text\n          if (editor.selection) {\n            let spanPath: Path | undefined\n            let markDefPath: Path | undefined\n            const markDefPaths: Path[] = []\n\n            Editor.withoutNormalizing(editor, () => {\n              if (!editor.selection) {\n                return\n              }\n\n              const selectedBlocks = Editor.nodes(editor, {\n                at: editor.selection,\n                match: (node) => editor.isTextBlock(node),\n                reverse: Range.isBackward(editor.selection),\n              })\n\n              for (const [block, blockPath] of selectedBlocks) {\n                if (block.children.length === 0) {\n                  continue\n                }\n\n                if (\n                  block.children.length === 1 &&\n                  block.children[0].text === ''\n                ) {\n                  continue\n                }\n\n                const annotationKey = editorActor\n                  .getSnapshot()\n                  .context.keyGenerator()\n                const markDefs = block.markDefs ?? []\n                const existingMarkDef = markDefs.find(\n                  (markDef) =>\n                    markDef._type === type.name &&\n                    markDef._key === annotationKey,\n                )\n\n                if (existingMarkDef === undefined) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      markDefs: [\n                        ...markDefs,\n                        {\n                          _type: type.name,\n                          _key: annotationKey,\n                          ...value,\n                        },\n                      ],\n                    },\n                    {at: blockPath},\n                  )\n\n                  markDefPath = [\n                    {_key: block._key},\n                    'markDefs',\n                    {_key: annotationKey},\n                  ]\n                  if (Range.isBackward(editor.selection)) {\n                    markDefPaths.unshift(markDefPath)\n                  } else {\n                    markDefPaths.push(markDefPath)\n                  }\n                }\n\n                Transforms.setNodes(\n                  editor,\n                  {},\n                  {match: Text.isText, split: true},\n                )\n\n                const children = Node.children(editor, blockPath)\n\n                for (const [span, path] of children) {\n                  if (!editor.isTextSpan(span)) {\n                    continue\n                  }\n\n                  if (!Range.includes(editor.selection, path)) {\n                    continue\n                  }\n\n                  const marks = span.marks ?? []\n                  const existingSameTypeAnnotations = marks.filter((mark) =>\n                    markDefs.some(\n                      (markDef) =>\n                        markDef._key === mark && markDef._type === type.name,\n                    ),\n                  )\n\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: [\n                        ...marks.filter(\n                          (mark) => !existingSameTypeAnnotations.includes(mark),\n                        ),\n                        annotationKey,\n                      ],\n                    },\n                    {at: path},\n                  )\n                  spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n                }\n              }\n\n              if (markDefPath && spanPath) {\n                returnValue = {\n                  markDefPath,\n                  markDefPaths,\n                  spanPath,\n                }\n              }\n            })\n            editor.onChange()\n          }\n        }\n        return returnValue\n      },\n      delete: (\n        selection: EditorSelection,\n        options?: EditableAPIDeleteOptions,\n      ): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          const hasRange =\n            range && range.anchor.path.length > 0 && range.focus.path.length > 0\n          if (!hasRange) {\n            throw new Error('Invalid range')\n          }\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            if (options?.mode === 'blocks') {\n              debug(`Deleting blocks touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                },\n              })\n            }\n            if (options?.mode === 'children') {\n              debug(`Deleting children touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    node._type === types.span.name || // Text children\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                  )\n                },\n              })\n            }\n            // If the editor was emptied, insert a placeholder block\n            // directly into the editor's children. We don't want to do this\n            // through a Transform (because that would trigger a change event\n            // that would insert the placeholder into the actual value\n            // which should remain empty)\n            if (editor.children.length === 0) {\n              editor.children = [editor.pteCreateTextBlock({decorators: []})]\n            }\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: <TSchemaType extends {name: string}>(\n        type: TSchemaType,\n      ): void => {\n        debug('Removing annotation', type)\n\n        Editor.withoutNormalizing(editor, () => {\n          if (!editor.selection) {\n            return\n          }\n\n          if (Range.isCollapsed(editor.selection)) {\n            const [block, blockPath] = Editor.node(editor, editor.selection, {\n              depth: 1,\n            })\n\n            if (!editor.isTextBlock(block)) {\n              return\n            }\n\n            const markDefs = block.markDefs ?? []\n            const potentialAnnotations = markDefs.filter(\n              (markDef) => markDef._type === type.name,\n            )\n\n            const [selectedChild, selectedChildPath] = Editor.node(\n              editor,\n              editor.selection,\n              {\n                depth: 2,\n              },\n            )\n\n            if (!editor.isTextSpan(selectedChild)) {\n              return\n            }\n\n            const annotationToRemove = selectedChild.marks?.find((mark) =>\n              potentialAnnotations.some((markDef) => markDef._key === mark),\n            )\n\n            if (!annotationToRemove) {\n              return\n            }\n\n            const previousSpansWithSameAnnotation: Array<\n              [span: PortableTextSpan, path: SlatePath]\n            > = []\n\n            for (const [child, childPath] of Node.children(editor, blockPath, {\n              reverse: true,\n            })) {\n              if (!editor.isTextSpan(child)) {\n                continue\n              }\n\n              if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n                continue\n              }\n\n              if (child.marks?.includes(annotationToRemove)) {\n                previousSpansWithSameAnnotation.push([child, childPath])\n              } else {\n                break\n              }\n            }\n\n            const nextSpansWithSameAnnotation: Array<\n              [span: PortableTextSpan, path: SlatePath]\n            > = []\n\n            for (const [child, childPath] of Node.children(editor, blockPath)) {\n              if (!editor.isTextSpan(child)) {\n                continue\n              }\n\n              if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n                continue\n              }\n\n              if (child.marks?.includes(annotationToRemove)) {\n                nextSpansWithSameAnnotation.push([child, childPath])\n              } else {\n                break\n              }\n            }\n\n            for (const [child, childPath] of [\n              ...previousSpansWithSameAnnotation,\n              [selectedChild, selectedChildPath] as const,\n              ...nextSpansWithSameAnnotation,\n            ]) {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: child.marks?.filter(\n                    (mark) => mark !== annotationToRemove,\n                  ),\n                },\n                {at: childPath},\n              )\n            }\n          } else {\n            Transforms.setNodes(\n              editor,\n              {},\n              {\n                match: (node) => editor.isTextSpan(node),\n                split: true,\n                hanging: true,\n              },\n            )\n\n            const blocks = Editor.nodes(editor, {\n              at: editor.selection,\n              match: (node) => editor.isTextBlock(node),\n            })\n\n            for (const [block, blockPath] of blocks) {\n              const children = Node.children(editor, blockPath)\n\n              for (const [child, childPath] of children) {\n                if (!editor.isTextSpan(child)) {\n                  continue\n                }\n\n                if (!Range.includes(editor.selection, childPath)) {\n                  continue\n                }\n\n                const markDefs = block.markDefs ?? []\n                const marks = child.marks ?? []\n                const marksWithoutAnnotation = marks.filter((mark) => {\n                  const markDef = markDefs.find(\n                    (markDef) => markDef._key === mark,\n                  )\n                  return markDef?._type !== type.name\n                })\n\n                if (marksWithoutAnnotation.length !== marks.length) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: marksWithoutAnnotation,\n                    },\n                    {at: childPath},\n                  )\n                }\n              }\n            }\n          }\n        })\n        editor.onChange()\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(\n          editor.children,\n          types.block.name,\n          KEY_TO_VALUE_ELEMENT.get(editor),\n        )\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n      getFragment: () => {\n        return fromSlateValue(editor.getFragment(), types.block.name)\n      },\n      isSelectionsOverlapping: (\n        selectionA: EditorSelection,\n        selectionB: EditorSelection,\n      ) => {\n        // Convert the selections to Slate ranges\n        const rangeA = toSlateRange(selectionA, editor)\n        const rangeB = toSlateRange(selectionB, editor)\n\n        // Make sure the ranges are valid\n        const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n        // Check if the ranges are overlapping\n        const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n        return isOverlapping\n      },\n    })\n    return editor\n  }\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  readOnly: boolean\n  blockSchemaType: ObjectSchemaType\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, readOnly, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    editor.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    editor.subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(): (\n  editor: PortableTextSlateEditor,\n) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(\n            editor,\n            {...node, style: defaultStyle} as Partial<Node>,\n            {\n              at: path,\n            },\n          )\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path},\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Text, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(\n  types: PortableTextMemberSchemaTypes,\n) {\n  return function withPortableTextLists(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path},\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path},\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug(\n              'Decrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          } else {\n            level++\n            debug(\n              'Incrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path},\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n\n      if (selectedBlocks.length > 0) {\n        return selectedBlocks.every(\n          ([node]) => editor.isListBlock(node) && node.listItem === listStyle,\n        )\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n  portableTextEditor: PortableTextEditor\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({\n  editorActor,\n  schemaTypes,\n  portableTextEditor,\n}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        portableTextEditor,\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {isHotkey} from 'is-hotkey-esm'\nimport type {KeyboardEvent} from 'react'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isArrowDown = isHotkey('down', event.nativeEvent)\n      const isArrowUp = isHotkey('up', event.nativeEvent)\n\n      // Check if the user is in a void block, in that case, add an empty text block below if there is no next block\n      if (isArrowDown && editor.selection) {\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          const nextPath = Path.next(editor.selection.focus.path.slice(0, 1))\n          const nextBlock = Node.has(editor, nextPath)\n          if (!nextBlock) {\n            Transforms.insertNodes(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n              {\n                at: nextPath,\n              },\n            )\n            Transforms.select(editor, {path: [...nextPath, 0], offset: 0})\n            editor.onChange()\n            return\n          }\n        }\n      }\n      if (isArrowUp && editor.selection) {\n        const isFirstBlock = editor.selection.focus.path[0] === 0\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (isFirstBlock && focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Transforms.insertNodes(\n            editor,\n            editor.pteCreateTextBlock({decorators: []}),\n            {\n              at: [0],\n            },\n          )\n          Transforms.select(editor, {path: [0, 0], offset: 0})\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {\n          depth: 2,\n        })\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m),\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as\n          | SlateTextBlock\n          | VoidElement\n\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n      }\n    }\n    return editor\n  }\n}\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import {noop} from 'lodash'\nimport type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<\n  PortableTextSlateEditor,\n  OriginalEditorFunctions\n>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions,\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, portableTextEditor, readOnly, maxBlocks} = options\n  const {schemaTypes} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withEditableAPI = createWithEditableAPI(\n    editorActor,\n    portableTextEditor,\n    schemaTypes,\n  )\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    readOnly,\n    blockSchemaType: schemaTypes.block,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock()\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n    portableTextEditor,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.apply = originalFunctions.apply\n    e.history = {undos: [], redos: []}\n    e.normalizeNode = originalFunctions.normalizeNode\n    e.onChange = originalFunctions.onChange\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(\n                    withPortableTextSelections(withEditableAPI(e)),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withEventListeners(\n      withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withPortableTextLists(\n                withPlaceholderBlock(\n                  withUtils(\n                    withMaxBlocks(\n                      withUndoRedo(\n                        withPatches(\n                          withPortableTextSelections(withEditableAPI(e)),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import {useEffect, useMemo, useState, type PropsWithChildren} from 'react'\nimport {createEditor} from 'slate'\nimport {Slate, withReact} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {withPlugins} from '../plugins'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  editorActor: EditorActor\n  maxBlocks: number | undefined\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {editorActor, portableTextEditor, readOnly, maxBlocks} = props\n\n  // Create the slate instance, using `useState` ensures setup is only run once, initially\n  const [[slateEditor, subscribe]] = useState(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      editorActor,\n      maxBlocks,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub] as const\n  })\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      editorActor,\n      maxBlocks,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [editorActor, portableTextEditor, maxBlocks, readOnly, slateEditor])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.pteCreateTextBlock({decorators: []})]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} initialValue={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n\nSlateContainer.displayName = 'SlateContainer'\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return readOnly\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {useSlate} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {\n  isChangingLocally,\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editorActor: EditorActor\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\nconst CURRENT_VALUE = new WeakMap<\n  PortableTextEditor,\n  PortableTextBlock[] | undefined\n>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (\n  value: PortableTextBlock[] | undefined,\n  userCallbackFn?: () => void,\n) => void {\n  const {editorActor, portableTextEditor, readOnly} = props\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  const updateValueFunctionRef =\n    useRef<(value: PortableTextBlock[] | undefined) => void>()\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n  const updateValueDebounced = useMemo(\n    () =>\n      debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(\n                slateEditor,\n                slateEditor.pteCreateTextBlock({decorators: []}),\n                {at: [0]},\n              )\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (\n                    let i = childrenLength - 1;\n                    i > slateValueFromProps.length - 1;\n                    i--\n                  ) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach(\n                  (currentBlock, currentBlockIndex) => {\n                    const oldBlock = slateEditor.children[currentBlockIndex]\n                    const hasChanges =\n                      oldBlock && !isEqual(currentBlock, oldBlock)\n                    if (hasChanges && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n                      if (\n                        !validation.valid &&\n                        validation.resolution?.autoResolve &&\n                        validation.resolution?.patches.length > 0\n                      ) {\n                        // Only apply auto resolution if the value has been populated before and is different from the last one.\n                        if (\n                          !readOnly &&\n                          previousValue.current &&\n                          previousValue.current !== value\n                        ) {\n                          // Give a console warning about the fact that it did an auto resolution\n                          console.warn(\n                            `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n                          )\n                          validation.resolution.patches.forEach((patch) => {\n                            editorActor.send({type: 'patch', patch})\n                          })\n                        }\n                      }\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        if (oldBlock._key === currentBlock._key) {\n                          if (debug.enabled)\n                            debug('Updating block', oldBlock, currentBlock)\n                          _updateBlock(\n                            slateEditor,\n                            currentBlock,\n                            oldBlock,\n                            currentBlockIndex,\n                          )\n                        } else {\n                          if (debug.enabled)\n                            debug('Replacing block', oldBlock, currentBlock)\n                          _replaceBlock(\n                            slateEditor,\n                            currentBlock,\n                            currentBlockIndex,\n                          )\n                        }\n                        isChanged = true\n                      } else {\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                    if (!oldBlock && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      if (debug.enabled)\n                        debug(\n                          'Validating and inserting new block in the end of the value',\n                          currentBlock,\n                        )\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      } else {\n                        debug('Invalid', validation)\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                  },\n                )\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          editorActor.send({\n            type: 'invalid value',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'value changed', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {throttle} from 'lodash'\nimport {useCallback, useEffect, useRef} from 'react'\nimport {Editor} from 'slate'\nimport {useSlate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {usePortableTextEditorReadOnlyStatus} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  getValue: () => Array<PortableTextBlock> | undefined\n  onChange: (change: EditorChange) => void\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const {editorActor, getValue, onChange, value} = props\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    editorActor,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const slateEditor = useSlate()\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = getValue()\n      editorActor.send({\n        type: 'mutation',\n        patches: pendingPatches.current,\n        snapshot,\n      })\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [editorActor, slateEditor, getValue])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    onChange(change),\n  )\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    const onFlushPendingPatchesThrottled = throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n\n    debug('Subscribing to editor changes')\n    const sub = editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'patch':\n          IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n          pendingPatches.current.push(event.patch)\n          onFlushPendingPatchesThrottled()\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'offline': {\n          handleChange({type: 'connection', value: 'offline'})\n          break\n        }\n        case 'online': {\n          handleChange({type: 'connection', value: 'online'})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'patches': {\n          break\n        }\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [editorActor, handleChange, onFlushPendingPatches, slateEditor])\n\n  // Sync the value when going online\n  const handleOnline = useCallback(() => {\n    debug('Editor is online, syncing from props.value')\n    syncValue(value)\n  }, [syncValue, value])\n\n  // Notify about window online and offline status changes\n  useEffect(() => {\n    const subscription = editorActor.on('online', handleOnline)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [handleOnline, editorActor])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      editorActor.send({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [editorActor, syncValue, value])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {BehaviourActionImplementation} from './behavior.actions'\nimport type {BehaviorAction, PickFromUnion} from './behavior.types'\n\nexport const insertBreakActionImplementation: BehaviourActionImplementation<\n  PickFromUnion<BehaviorAction, 'type', 'insert break' | 'insert soft break'>\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  Editor,\n  insertText,\n  Transforms,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {toSlateRange} from '../../utils/ranges'\nimport {\n  addDecoratorActionImplementation,\n  removeDecoratorActionImplementation,\n  toggleDecoratorActionImplementation,\n} from '../plugins/createWithPortableTextMarkModel'\nimport {insertBreakActionImplementation} from './behavior.action.insert-break'\nimport type {\n  BehaviorAction,\n  BehaviorEvent,\n  PickFromUnion,\n} from './behavior.types'\n\nexport type BehaviorActionContext = {\n  keyGenerator: () => string\n  schema: PortableTextMemberSchemaTypes\n}\n\nexport type BehaviourActionImplementation<\n  TBehaviorAction extends BehaviorAction,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: TBehaviorAction\n}) => void\n\ntype BehaviourActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviourActionImplementation<\n    PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n  >\n}\n\nconst behaviorActionImplementations: BehaviourActionImplementations = {\n  'decorator.add': addDecoratorActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'decorator.toggle': toggleDecoratorActionImplementation,\n  'set block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.setNodes(\n        action.editor,\n        {\n          ...(action.style ? {style: action.style} : {}),\n          ...(action.listItem ? {listItem: action.listItem} : {}),\n          ...(action.level ? {level: action.level} : {}),\n        },\n        {at},\n      )\n    }\n  },\n  'unset block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.unsetNodes(action.editor, action.props, {at})\n    }\n  },\n  'delete backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete': ({action}) => {\n    const location = toSlateRange(action.selection, action.editor)\n\n    if (!location) {\n      console.error(\n        `Could not find Slate location from selection ${action.selection}`,\n      )\n      return\n    }\n\n    if (location.anchor.path.length === 1 && location.focus.path.length === 1) {\n      Transforms.removeNodes(action.editor, {\n        at: location,\n      })\n    } else {\n      Transforms.delete(action.editor, {\n        at: location,\n      })\n    }\n  },\n  'insert break': insertBreakActionImplementation,\n  // This mimics Slate's internal which also just does a regular insert break\n  // when on soft break\n  'insert soft break': insertBreakActionImplementation,\n  'insert text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert text block': ({context, action}) => {\n    Editor.insertNode(action.editor, {\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? 'normal',\n      markDefs: [],\n      children: [\n        {\n          _key: context.keyGenerator(),\n          _type: 'span',\n          text: '',\n        },\n      ],\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'select': ({action}) => {\n    const newSelection = toSlateRange(action.selection, action.editor)\n\n    if (newSelection) {\n      Transforms.select(action.editor, newSelection)\n    } else {\n      Transforms.deselect(action.editor)\n    }\n  },\n  'reselect': ({action}) => {\n    const selection = action.editor.selection\n\n    if (selection) {\n      Transforms.select(action.editor, {...selection})\n      action.editor.selection = {...selection}\n    }\n  },\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert text block': {\n      behaviorActionImplementations['insert text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'set block': {\n      behaviorActionImplementations['set block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'unset block': {\n      behaviorActionImplementations['unset block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    case 'reselect': {\n      behaviorActionImplementations.reselect({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nexport function performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: PickFromUnion<BehaviorAction, 'type', BehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.toggle': {\n      behaviorActionImplementations['decorator.toggle']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete backward': {\n      behaviorActionImplementations['delete backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete forward': {\n      behaviorActionImplementations['delete forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert break': {\n      behaviorActionImplementations['insert break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert soft break': {\n      behaviorActionImplementations['insert soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['insert text']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {performAction} from './behavior/behavior.actions'\nimport {coreBehaviors} from './behavior/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  BehaviorActionIntend,\n  BehaviorContext,\n  BehaviorEvent,\n} from './behavior/behavior.types'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\nconst networkLogic = fromCallback(({sendBack}) => {\n  const onlineHandler = () => {\n    sendBack({type: 'online'})\n  }\n  const offlineHandler = () => {\n    sendBack({type: 'offline'})\n  }\n\n  window.addEventListener('online', onlineHandler)\n  window.addEventListener('offline', offlineHandler)\n\n  return () => {\n    window.removeEventListener('online', onlineHandler)\n    window.removeEventListener('offline', offlineHandler)\n  }\n})\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\ntype EditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'behavior action intends'\n      editor: PortableTextSlateEditor\n      actionIntends: Array<BehaviorActionIntend>\n    }\n  | {\n      type: 'update schema'\n      schema: PortableTextMemberSchemaTypes\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | EditorEmittedEvent\n\ntype EditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blur'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focus'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'online'}\n  | {type: 'offline'}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: PortableTextMemberSchemaTypes\n    },\n    events: {} as EditorEvent,\n    emitted: {} as EditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      schema: PortableTextMemberSchemaTypes\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return event.behaviors\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction = {\n        ...event.behaviorEvent,\n        editor: event.editor,\n      } satisfies BehaviorAction\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      if (!selection) {\n        console.warn(\n          `Unable to handle event ${event.type} due to missing selection`,\n        )\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n        return\n      }\n\n      const behaviorContext = {\n        schema: context.schema,\n        value,\n        selection,\n      } satisfies BehaviorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard?.({\n            context: behaviorContext,\n            event: event.behaviorEvent,\n          }) ?? true\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: behaviorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            actionIntends.length > 0 &&\n            actionIntends.some((actionIntend) => actionIntend.type !== 'effect')\n\n          enqueue.raise({\n            type: 'behavior action intends',\n            editor: event.editor,\n            actionIntends,\n          })\n        }\n\n        if (behaviorOverwritten) {\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        enqueue.raise({\n          type: 'behavior action intends',\n          editor: event.editor,\n          actionIntends: [defaultAction],\n        })\n      }\n    }),\n  },\n  actors: {\n    networkLogic,\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors ?? coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n  }),\n  invoke: {\n    id: 'networkLogic',\n    src: 'networkLogic',\n  },\n  on: {\n    'ready': {actions: emit(({event}) => event)},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {actions: emit(({event}) => event)},\n    'blur': {actions: emit(({event}) => event)},\n    'focus': {actions: emit(({event}) => event)},\n    'online': {actions: emit({type: 'online'})},\n    'offline': {actions: emit({type: 'offline'})},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'behavior event': {actions: 'handle behavior event'},\n    'behavior action intends': {\n      actions: [\n        ({context, event}) => {\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of event.actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n        },\n        enqueueActions(({context, event, enqueue}) => {\n          if (\n            event.actionIntends.some(\n              (actionIntend) => actionIntend.type === 'reselect',\n            )\n          ) {\n            enqueue.raise({\n              type: 'selection',\n              selection: toPortableTextRange(\n                event.editor.children,\n                event.editor.selection,\n                context.schema,\n              ),\n            })\n          }\n        }),\n      ],\n    },\n  },\n  initial: 'pristine',\n  states: {\n    pristine: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            normalizing: {\n              target: 'normalizing',\n            },\n            patch: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n            mutation: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n          },\n        },\n        normalizing: {\n          on: {\n            'done normalizing': {\n              target: 'idle',\n            },\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n          },\n        },\n      },\n    },\n    dirty: {\n      entry: ['emit pending events', 'clear pending events'],\n      on: {\n        patch: {\n          actions: 'emit patch event',\n        },\n        mutation: {\n          actions: 'emit mutation event',\n        },\n      },\n    },\n  },\n})\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {randomKey} from '@sanity/util/content'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {createActor} from 'xstate'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\nimport {EditorActorContext} from './editor-actor-context'\nimport {editorMachine, type EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorReadOnlyContext} from './hooks/usePortableTextReadOnly'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {Editor} from './use-editor'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  (TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n      }) & {\n    /**\n     * Whether or not the editor should be in read-only mode\n     */\n    readOnly?: boolean\n\n    /**\n     * The current value of the portable text field\n     */\n    value?: PortableTextBlock[]\n\n    /**\n     * A ref to the editor instance\n     */\n    editorRef?: MutableRefObject<PortableTextEditor | null>\n  }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n  private editorActor: EditorActor\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editorActor = props.editor\n      this.editorActor.start()\n      this.schemaTypes = this.editorActor.getSnapshot().context.schema\n    } else {\n      if (!props.schemaType) {\n        throw new Error('PortableTextEditor: missing \"schemaType\" property')\n      }\n\n      if (props.incomingPatches$) {\n        console.warn(\n          `The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`,\n        )\n      }\n\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        props.schemaType.hasOwnProperty('jsonType')\n          ? props.schemaType\n          : compileType(props.schemaType),\n      )\n\n      this.editorActor =\n        props.editor ??\n        createActor(editorMachine, {\n          input: {\n            keyGenerator: props.keyGenerator || defaultKeyGenerator,\n            schema: this.schemaTypes,\n          },\n        })\n      this.editorActor.start()\n    }\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (this.props.editorRef !== prevProps.editorRef && this.props.editorRef) {\n      this.props.editorRef.current = this\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  private getValue = () => {\n    if (this.editable) {\n      return this.editable.getValue()\n    }\n\n    return undefined\n  }\n\n  render() {\n    const maxBlocks = !this.props.editor\n      ? typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : Number.parseInt(this.props.maxBlocks.toString(), 10) || undefined\n      : undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editorActor}>\n          <SlateContainer\n            editorActor={this.editorActor}\n            maxBlocks={maxBlocks}\n            portableTextEditor={this}\n            readOnly={readOnly}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editorActor}\n                >\n                  <Synchronizer\n                    editorActor={this.editorActor}\n                    getValue={this.getValue}\n                    onChange={(change) => {\n                      if (!this.props.editor) {\n                        this.props.onChange(change)\n                      }\n                      /**\n                       * For backwards compatibility, we relay all changes to the\n                       * `change$` Subject as well.\n                       */\n                      this.change$.next(change)\n                    }}\n                    value={this.props.value}\n                  />\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorReadOnlyContext.Provider>\n            </PortableTextEditorContext.Provider>\n          </SlateContainer>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ):\n    | {\n        /**\n         * @deprecated An annotation may be applied to multiple blocks, resulting\n         * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n         */\n        markDefPath: Path\n        markDefPaths: Array<Path>\n        /**\n         * @deprecated Does not return anything meaningful since an annotation\n         * can span multiple blocks and spans. If references the span closest\n         * to the focus point of the selection.\n         */\n        spanPath: Path\n      }\n    | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations(\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor,\n  syncRangeDecorations: (operation?: Operation) => void,\n) {\n  const originalApply = slateEditor.apply\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n    if (op.type !== 'set_selection') {\n      syncRangeDecorations(op)\n    }\n  }\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {createWithHotkeys, createWithInsertData} from './plugins'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const {schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    const withInsertData = createWithInsertData(editorActor, schemaTypes)\n\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [\n    editorActor,\n    hotkeys,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n  ])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations(slateEditor, syncRangeDecorations)\n    return () => teardown()\n  }, [slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste({event, value, path, schemaTypes})\n\n      if (onPasteResult === undefined) {\n        debug('No result from custom paste handler, pasting normally')\n        slateEditor.insertData(event.clipboardData)\n      } else {\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      }\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focus', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n      // Inserts a new block if it's clicking on the editor, focused on the last block and it's a void element\n      if (slateEditor.selection && event.target === event.currentTarget) {\n        const [lastBlock, path] = Node.last(slateEditor, [])\n        const focusPath = slateEditor.selection.focus.path.slice(0, 1)\n        const lastPath = path.slice(0, 1)\n        if (Path.equals(focusPath, lastPath)) {\n          const node = Node.descendant(slateEditor, path.slice(0, 1)) as\n            | SlateTextBlock\n            | VoidElement\n          if (lastBlock && Editor.isVoid(slateEditor, node)) {\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n            )\n            slateEditor.onChange()\n          }\n        }\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blur', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n    },\n    [props, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport type {Behavior} from './behavior/behavior.types'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {editorMachine} from './editor-machine'\nimport {defaultKeyGenerator} from './key-generator'\n\n/**\n * @alpha\n */\nexport type EditorConfig = {\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @alpha\n */\nexport type Editor = ReturnType<typeof useEditor>\n\n/**\n * @alpha\n */\nexport function useEditor(config: EditorConfig) {\n  const schema = config.schemaDefinition\n    ? compileSchemaDefinition(config.schemaDefinition)\n    : getPortableTextMemberSchemaTypes(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n\n  const editorActor = useActorRef(editorMachine, {\n    input: {\n      behaviors: config.behaviors,\n      keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n      schema,\n    },\n  })\n\n  return editorActor\n}\n"],"names":["defineBehavior","behavior","selectionIsCollapsed","context","selection","anchor","path","join","focus","offset","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","block","getFocusTextBlock","focusBlock","isPortableTextTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getSelectionStartBlock","backward","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","isEmptyTextBlock","length","text","breakingBlockObject","on","guard","actions","type","decorators","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","_","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","decoratorAdd","event","decorator","decoratorRemove","decoratorToggle","coreDecoratorBehaviors","clearListOnBackspace","focusSpan","level","props","paths","unindentListOnBackspace","coreListBehaviors","softReturn","coreBehaviors","coreBehavior","blockObjects","lists","createMarkdownBehaviors","config","automaticBlockquoteOnSpace","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","mapBlockquoteStyle","schema","style","automaticHeadingOnSpace","markdownHeadingSearch","exec","headingLevel","headingStyle","mapHeadingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","mapDefaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","mapUnorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","mapOrderedListStyle","caretAtTheEndOfOrderedList","getPortableTextMemberSchemaTypes","portableTextType","Error","blockType","of","findBlockType","childrenField","fields","field","name","ofType","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","resolveEnabledDecorators","resolveEnabledListItems","portableText","inlineObjects","annotations","styleField","btField","textStyles","options","list","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","icon","inlineObject","portableTextSchema","defineField","marks","startCase","annotation","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","keyedBlockPath","_type","keyedChildPath","childPath","slice","child","Array","isArray","createArrayedPath","editor","from","Editor","nodes","at","match","n","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchorPath","focusPath","Boolean","Range","isRange","isBackward","toSlateRange","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","voidChildren","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","$","t0","JSON","stringify","t1","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","isMyDragOver","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","t18","t19","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","depth","schemaType","SlateElement","elmPath","debugRenders","ObjectNode","editorElementRef","isListItem","blockStyleType","item","isListBlock","listType","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","alert","handleClick","color","compileType","rawType","Schema","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","patch","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","patches","keys","forEach","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","console","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","editorActor","addMark","mark","send","behaviorEvent","removeMark","deleteBackward","unit","deleteForward","insertBreak","insertSoftBreak","insertText","every","isPortableTextBlock","def","getPreviousSpan","spanPath","previousSpan","Node","reverse","getNextSpan","nextSpan","isAfter","withRemoteChanges","fn","prev","isChangingRemotely","isChangingLocally","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithPortableTextMarkModel","apply","normalizeNode","nodeEntry","nextNode","includes","mergeNodes","voids","setNodes","parent","orphanedAnnotations","markDefKeys","Set","newMarkDefs","markDef","has","add","operations","some","op","properties","previousSelectionIsCollapsed","newSelectionIsCollapsed","mode","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","insertNodes","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","getSnapshot","keyGenerator","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","withoutNormalizing","oldDefs","uniq","addDecoratorActionImplementation","action","split","hanging","splitTextNodes","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","removeDecoratorActionImplementation","isDecoratorActive","selectedNodes","toggleDecoratorActionImplementation","createWithEditableAPI","portableTextEditor","setEditable","blur","toggleMark","toggleList","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","err","undo","redo","select","slateSelection","deselect","descendant","insertChild","focusChildPath","isSpanNode","focusNode","move","distance","insertBlock","lastBlock","isEditor","insertNode","removeNodes","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","selectionMarkDefs","reduce","accMarkDefs","markKey","addAnnotation","originalSelection","returnValue","pteExpandToWord","markDefPath","markDefPaths","selectedBlocks","annotationKey","unshift","existingSameTypeAnnotations","pteCreateTextBlock","removeAnnotation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","blocks","marksWithoutAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","createWithMaxBlocks","maxBlocks","rows","createWithObjectKeys","entry","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","error","findBlockAndChildFromPath","parsePatch","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","diff","cleanupEfficiency","makeDiff","debugState","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","targetBlockPath","targetChildPath","items","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","cIndex","newVal","applyAll","previousSelection","_child","i","blockIndex","isKeyedSegment","segment","stateName","findBlockFromPath","index","isMatch","PATCHING","withoutPatching","isPatching","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","snapshot","reset","origin","history","undos","redos","splice","time","Date","unsubscribe","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","otherPatches","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","normalize","pop","transformedOperation","insertBlockIndex","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diffType","dType","currentFocus","currentAnchor","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","createWithPlaceholderBlock","nextPath","next","createWithPortableTextBlockStyle","SlateText","MAX_LIST_LEVEL","createWithPortableTextLists","listItemStyle","pteUnsetListItem","pteSetListItem","newNode","pteEndList","pteIncrementBlockLevels","min","max","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","hasChanges","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","nativeEvent","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isArrowDown","isArrowUp","isFirstBlock","hasAnnotationFocus","m","start","edges","atStartOfNode","isStart","focusBlockPath","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","String","values","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","toString","orphanedMarks","dec","spanChildren","orphaned","cMrk","newChild","childType","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","setFragmentData","data","originEvent","end","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","slateValue","_regenerateKeys","validation","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","s","editorTypes","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","splitNodes","originalFnMap","withPlugins","e","destroy","operationToPatches","withObjectKeys","withSchemaTypes","withEditableAPI","withPatches","withMaxBlocks","withPortableTextLists","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","withEventListeners","originalFunctions","subscribe","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","_sub","withReact","createEditor","slateEditor","initialValue","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","CURRENT_VALUE","useSyncValue","useSlate","updateValueFunctionRef","updateFromCurrentValue","useCallback","currentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","pendingPatches","syncValue","onFlushPendingPatches","change","handleChange","useEffectEvent","onFlushPendingPatchesThrottled","throttle","isNormalizing","bb18","isLoading","handleOnline","subscription","isInitialValueFromProps","EditorActorContext","insertBreakActionImplementation","focusDecorators","focusAnnotations","atTheStartOfBlock","nextBlockPath","lastFocusBlockChild","atTheEndOfBlock","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","behaviorActionImplementations","set block","unset block","unsetNodes","delete backward","delete forward","location","insert text","insert text block","effect","newSelection","reselect","performAction","performDefaultAction","networkLogic","fromCallback","sendBack","onlineHandler","offlineHandler","addEventListener","window","removeEventListener","editorMachine","setup","events","emitted","input","assign","behaviors","assertEvent","emit","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","raise","actionIntends","behaviorContext","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntend","actors","createMachine","id","invoke","src","initial","states","pristine","idle","normalizing","mutation","dirty","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","defaultKeyGenerator","randomKey","PortableTextEditor","Component","change$","Subject","constructor","incomingPatches$","hasOwnProperty","createActor","componentDidUpdate","prevProps","editorRef","editable","render","parseInt","legacyPatches","patches$","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","withSyncRangeDecorations","syncRangeDecorations","originalApply","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","handlePaste","clipboardData","onPasteResult","Promise","resolve","then","result","catch","finally","handleOnFocus","isDefaultPrevented","currentTarget","last","lastPath","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","useEditor","schemaDefinition","useActorRef"],"mappings":"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","x_google_ignoreList":[24,32]}